"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPostgresClient = exports.getPostgresSubscriber = exports.getPostgresConnectionOpts = exports.constructDatabaseURL = void 0;
const micro_logging_1 = __importDefault(require("@kadima-tech/micro-logging"));
const pg_1 = __importDefault(require("pg"));
const pg_listen_1 = __importDefault(require("pg-listen"));
const constructDatabaseURL = () => {
    const host = process.env.DATABASE_HOST || "localhost:5432";
    const database = process.env.DATABASE_NAME || "postgres";
    const username = process.env.DATABASE_USER || "postgres";
    const password = process.env.DATABASE_PASSWORD || "mysecretpassword";
    return `postgresql://${username}:${password}@${host}/${database}`;
};
exports.constructDatabaseURL = constructDatabaseURL;
const getPostgresConnectionOpts = (pgConfig) => {
    return {
        ...pgConfig,
        connectionString: pgConfig?.connectionString ||
            process.env.DATABASE_URL ||
            (0, exports.constructDatabaseURL)(),
    };
};
exports.getPostgresConnectionOpts = getPostgresConnectionOpts;
const getPostgresSubscriber = async (pgConfig, options) => {
    const subscriber = (0, pg_listen_1.default)((0, exports.getPostgresConnectionOpts)(pgConfig), options);
    subscriber.events.on("connected", () => {
        micro_logging_1.default.debug("Postgres listener connected");
    });
    subscriber.events.on("reconnect", (attempt) => {
        micro_logging_1.default.debug(`Postgres listener reconnecting - attempt #${attempt}`);
    });
    subscriber.events.on("error", (err) => {
        micro_logging_1.default.error({ err }, "Postgres listener error");
        throw err; // Rethrow as this means reconnections have failed and we need to kill the container
    });
    await subscriber.connect();
    return subscriber;
};
exports.getPostgresSubscriber = getPostgresSubscriber;
const getPostgresClient = (pgConfig) => {
    const client = new pg_1.default.Client((0, exports.getPostgresConnectionOpts)(pgConfig));
    client.connect();
    return client;
};
exports.getPostgresClient = getPostgresClient;
//# sourceMappingURL=postgres.js.map