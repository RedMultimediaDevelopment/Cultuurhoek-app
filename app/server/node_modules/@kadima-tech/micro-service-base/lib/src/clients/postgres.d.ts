/// <reference types="node" />
/// <reference types="node" />
import pg from "pg";
import { Options } from "pg-listen";
export interface PostgresClientConfig {
    url?: string;
}
export declare const constructDatabaseURL: () => string;
export declare const getPostgresConnectionOpts: (pgConfig?: pg.ClientConfig) => {
    connectionString: string;
    user?: string | undefined;
    database?: string | undefined;
    password?: string | (() => string | Promise<string>) | undefined;
    port?: number | undefined;
    host?: string | undefined;
    keepAlive?: boolean | undefined;
    stream?: import("stream").Duplex | undefined;
    statement_timeout?: number | false | undefined;
    ssl?: boolean | import("tls").ConnectionOptions | undefined;
    query_timeout?: number | undefined;
    keepAliveInitialDelayMillis?: number | undefined;
    idle_in_transaction_session_timeout?: number | undefined;
    application_name?: string | undefined;
    connectionTimeoutMillis?: number | undefined;
    types?: pg.CustomTypesConfig | undefined;
    options?: string | undefined;
};
export declare const getPostgresSubscriber: (pgConfig?: pg.ClientConfig, options?: Options) => Promise<import("pg-listen").Subscriber<{
    [channel: string]: any;
}>>;
export declare const getPostgresClient: (pgConfig?: pg.ClientConfig) => pg.Client;
