"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const formatters_1 = require("./formatters");
const baseReq = {
    protocol: 'http',
    hostname: 'localhost',
    url: '/some-endpoint',
    query: {},
};
describe('Array Formatting', () => {
    it('Should format a response with only a self link if there is just one page', () => {
        const response = (0, formatters_1.asArrayResponse)(baseReq, [], 0);
        expect(response).toStrictEqual({
            data: [],
            page: {
                size: 20,
                number: 0,
                totalElements: 0,
                totalPages: 0,
            },
            links: {
                next: undefined,
                previous: undefined,
                self: 'http://localhost/some-endpoint?size=20',
            },
        });
    });
    it('Should use the query params to set the page and page size parameters', () => {
        const response = (0, formatters_1.asArrayResponse)({
            ...baseReq,
            query: {
                page: 1,
                size: 30,
            },
        }, [], 0);
        expect(response).toStrictEqual({
            data: [],
            page: {
                size: 30,
                number: 1,
                totalElements: 0,
                totalPages: 0,
            },
            links: {
                next: undefined,
                self: 'http://localhost/some-endpoint?page=1&size=30',
                previous: 'http://localhost/some-endpoint?page=0&size=30',
            },
        });
    });
    it('Should set a next link if more resources are available', () => {
        const response = (0, formatters_1.asArrayResponse)({
            ...baseReq,
            query: {
                page: 1,
                size: 30,
            },
        }, [], 80);
        expect(response).toStrictEqual({
            data: [],
            page: {
                size: 30,
                number: 1,
                totalElements: 80,
                totalPages: 3,
            },
            links: {
                self: 'http://localhost/some-endpoint?page=1&size=30',
                previous: 'http://localhost/some-endpoint?page=0&size=30',
                next: 'http://localhost/some-endpoint?page=2&size=30',
            },
        });
    });
    it('Should return sensible values if pagination is disabled', () => {
        const response = (0, formatters_1.asArrayResponse)({
            ...baseReq,
            query: {
                page: 0,
                size: -1,
            },
        }, [], 50);
        expect(response).toStrictEqual({
            data: [],
            page: {
                size: -1,
                number: 0,
                totalElements: 50,
                totalPages: 1,
            },
            links: {
                self: 'http://localhost/some-endpoint?size=-1',
                next: undefined,
                previous: undefined,
            },
        });
    });
});
describe('Object formatting', () => {
    it('Should always provide a self link', () => {
        const response = (0, formatters_1.asObjectResponse)(baseReq, { id: 'some-id' });
        expect(response).toStrictEqual({
            data: {
                id: 'some-id',
            },
            links: {
                self: 'http://localhost/some-endpoint',
            },
        });
    });
});
//# sourceMappingURL=formatters.test.js.map