import { FastifyRequest } from 'fastify';
import { Static, TSchema, ObjectOptions } from '@sinclair/typebox';
import { PaginationQuery } from '../../schemas';
export declare const PageMetaSchema: import("@sinclair/typebox").TObject<{
    size: import("@sinclair/typebox").TNumber;
    totalElements: import("@sinclair/typebox").TNumber;
    totalPages: import("@sinclair/typebox").TNumber;
    number: import("@sinclair/typebox").TNumber;
}>;
export declare const LinksMetaSchema: import("@sinclair/typebox").TObject<{
    self: import("@sinclair/typebox").TString<"uri">;
    previous: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
    next: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
}>;
export declare const getArrayResponseSchemaForType: (t: TSchema, title: string, options?: ObjectOptions) => import("@sinclair/typebox").TObject<{
    page: import("@sinclair/typebox").TObject<{
        size: import("@sinclair/typebox").TNumber;
        totalElements: import("@sinclair/typebox").TNumber;
        totalPages: import("@sinclair/typebox").TNumber;
        number: import("@sinclair/typebox").TNumber;
    }>;
    data: import("@sinclair/typebox").TArray<TSchema>;
    links: import("@sinclair/typebox").TObject<{
        self: import("@sinclair/typebox").TString<"uri">;
        previous: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
        next: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
    }>;
}>;
export declare const getObjectResponseSchemaForType: (t: TSchema, title: string, options?: ObjectOptions) => import("@sinclair/typebox").TObject<{
    data: TSchema;
    links: import("@sinclair/typebox").TObject<{
        self: import("@sinclair/typebox").TString<"uri">;
        previous: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
        next: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
    }>;
}>;
declare const arrayResponseForAny: import("@sinclair/typebox").TObject<{
    page: import("@sinclair/typebox").TObject<{
        size: import("@sinclair/typebox").TNumber;
        totalElements: import("@sinclair/typebox").TNumber;
        totalPages: import("@sinclair/typebox").TNumber;
        number: import("@sinclair/typebox").TNumber;
    }>;
    data: import("@sinclair/typebox").TArray<TSchema>;
    links: import("@sinclair/typebox").TObject<{
        self: import("@sinclair/typebox").TString<"uri">;
        previous: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
        next: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
    }>;
}>;
type ArrayResponse = Static<typeof arrayResponseForAny>;
declare const objectResponseForAny: import("@sinclair/typebox").TObject<{
    data: TSchema;
    links: import("@sinclair/typebox").TObject<{
        self: import("@sinclair/typebox").TString<"uri">;
        previous: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
        next: import("@sinclair/typebox").TOptional<import("@sinclair/typebox").TString<"uri">>;
    }>;
}>;
type ObjectResponse = Static<typeof objectResponseForAny>;
export declare const asArrayResponse: (req: FastifyRequest<{
    Querystring: PaginationQuery;
}>, data: any[], totalElements: number) => ArrayResponse;
export declare const asObjectResponse: (req: FastifyRequest, data: any) => ObjectResponse;
export {};
