"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupServicePlugin = void 0;
// import { fastifyHttpContextPlugin, httpContext } from 'fastify-http-context';
const swagger_1 = __importDefault(require("@fastify/swagger"));
const swagger_ui_1 = __importDefault(require("@fastify/swagger-ui"));
const config_1 = require("./config");
const hooks_1 = require("./hooks");
const setupRoutesForVersion = (routes, config) => async (versionedInstance, opts) => {
    // Setup swagger for version
    versionedInstance.setErrorHandler(hooks_1.errorHandler);
    versionedInstance.register(swagger_1.default, {
        openapi: {
            info: {
                title: config.title,
                description: config.description,
                version: config.version,
            },
            ...config.swagger,
        },
        refResolver: {
            buildLocalReference: (json, baseUri, fragment, i) => {
                if (json.$id) {
                    return json.$id;
                }
                return `def-${i}`;
            },
        },
        transform: config.swaggerTransform,
    });
    await versionedInstance.register(swagger_ui_1.default, {
        staticCSP: true,
        routePrefix: "/documentation",
    });
    versionedInstance.register(async (childInstance, opts) => {
        childInstance.addHook("preHandler", hooks_1.injectContextHook);
        childInstance.addHook("preSerialization", hooks_1.formatResponseHook);
        routes.forEach((route) => {
            childInstance.register(route.router, {
                prefix: route.path,
            });
        });
    });
};
const setupServicePlugin = (config) => {
    (0, config_1.parseConfiguration)(config);
    return async (fastify, opts) => {
        const routesByVersion = config.routes.reduce((bucket, route) => {
            const version = route.version || "v1";
            if (bucket[version]) {
                bucket[version].push(route);
            }
            else {
                bucket[version] = [route];
            }
            return bucket;
        }, {});
        Object.keys(routesByVersion).forEach((version) => {
            fastify.register(setupRoutesForVersion(routesByVersion[version], config), {
                prefix: `/${version}`,
            });
        });
    };
};
exports.setupServicePlugin = setupServicePlugin;
//# sourceMappingURL=plugin.js.map