"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConfiguration = exports.parseRoute = void 0;
const micro_logging_1 = __importDefault(require("@kadima-tech/micro-logging"));
const parseRoute = (route) => {
    if (!route.path) {
        route.path = "";
    }
    if (!route.version) {
        route.version = "v1";
    }
    if (route.path[0] !== "/" && route.path.length > 0) {
        throw new Error("Setup Error: The route's path must be provided and should be either an empty string or start with '/'");
    }
    if (!route.router) {
        throw new Error("Setup Error: A router must be provided");
    }
};
exports.parseRoute = parseRoute;
const parseConfiguration = (config) => {
    if (!config.routes || config.routes.length === 0) {
        micro_logging_1.default.warn("No routes were provided. Setup your routes with the setupMicroservice config to get access to the userContext");
        config.routes = [];
    }
};
exports.parseConfiguration = parseConfiguration;
//# sourceMappingURL=config.js.map