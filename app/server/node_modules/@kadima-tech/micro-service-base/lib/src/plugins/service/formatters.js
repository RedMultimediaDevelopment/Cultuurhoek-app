"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.asObjectResponse = exports.asArrayResponse = exports.getObjectResponseSchemaForType = exports.getArrayResponseSchemaForType = exports.LinksMetaSchema = exports.PageMetaSchema = void 0;
const typebox_1 = require("@sinclair/typebox");
exports.PageMetaSchema = typebox_1.Type.Object({
    size: typebox_1.Type.Number({ minimum: 0 }),
    totalElements: typebox_1.Type.Number({ minimum: 0 }),
    totalPages: typebox_1.Type.Number({ minimum: 0 }),
    number: typebox_1.Type.Number({ minimum: 0 }),
}, { additionalProperties: false });
exports.LinksMetaSchema = typebox_1.Type.Object({
    self: typebox_1.Type.String({ format: 'uri' }),
    previous: typebox_1.Type.Optional(typebox_1.Type.String({ format: 'uri' })),
    next: typebox_1.Type.Optional(typebox_1.Type.String({ format: 'uri' })),
}, { additionalProperties: false });
const getArrayResponseSchemaForType = (t, title, options) => typebox_1.Type.Object({
    page: exports.PageMetaSchema,
    data: typebox_1.Type.Array(t),
    links: exports.LinksMetaSchema,
}, { ...options, title, additionalProperties: false });
exports.getArrayResponseSchemaForType = getArrayResponseSchemaForType;
const getObjectResponseSchemaForType = (t, title, options) => typebox_1.Type.Object({
    data: t,
    links: exports.LinksMetaSchema,
}, { ...options, title, additionalProperties: false });
exports.getObjectResponseSchemaForType = getObjectResponseSchemaForType;
const arrayResponseForAny = (0, exports.getArrayResponseSchemaForType)(typebox_1.Type.Any(), 'default');
const objectResponseForAny = (0, exports.getObjectResponseSchemaForType)(typebox_1.Type.Any(), 'default');
const getBaseSelfLink = (req) => {
    let hostname = req.hostname;
    let url = req.url;
    if (hostname[hostname.length - 1] === '/') {
        hostname = hostname.substr(0, hostname.length - 1);
    }
    if (url[0] === '/') {
        url = url.substr(1, url.length);
    }
    return `${req.protocol}://${hostname}/${url.split('?')[0]}`;
};
const asArrayResponse = (req, data, totalElements) => {
    const fqurl = getBaseSelfLink(req);
    const currentPage = Number(req.query.page || 0);
    const pageSize = Number(req.query.size || 20);
    const totalPages = pageSize > 0 ? Math.ceil(totalElements / pageSize) : 1;
    return {
        data,
        page: {
            size: pageSize,
            number: currentPage,
            totalElements,
            totalPages,
        },
        links: {
            self: currentPage > 0
                ? `${fqurl}?page=${currentPage}&size=${pageSize}`
                : `${fqurl}?size=${pageSize}`,
            previous: currentPage > 0
                ? `${fqurl}?page=${currentPage - 1}&size=${pageSize}`
                : undefined,
            next: currentPage + 1 < totalPages
                ? `${fqurl}?page=${currentPage + 1}&size=${pageSize}`
                : undefined,
        },
    };
};
exports.asArrayResponse = asArrayResponse;
const asObjectResponse = (req, data) => {
    const fqurl = getBaseSelfLink(req);
    return {
        data,
        links: {
            self: fqurl,
        },
    };
};
exports.asObjectResponse = asObjectResponse;
//# sourceMappingURL=formatters.js.map