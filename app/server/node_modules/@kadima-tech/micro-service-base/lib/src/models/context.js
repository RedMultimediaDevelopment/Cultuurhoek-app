"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = exports.AnonymousContext = void 0;
const jwt_decode_1 = __importDefault(require("jwt-decode"));
const UnauthorizedError_1 = require("../errors/UnauthorizedError");
class AnonymousContext {
    hasRole(role) {
        return false;
    }
    isAdmin() {
        return false;
    }
    isAuthorizedUser() {
        return false;
    }
    getUserId() {
        return null;
    }
    featureFlagEnabled(_) {
        return false;
    }
    hasScope(_) {
        return false;
    }
    hasAdminScope() {
        return false;
    }
}
exports.AnonymousContext = AnonymousContext;
class Context {
    constructor(claims) {
        if (!claims.sub || !claims.roles) {
            throw new UnauthorizedError_1.UnauthorizedError('JWT token provided invalid credentials');
        }
        this.userRoles = claims.roles;
        this.userId = claims.sub;
        this.features = claims.features
            ? new Map(Object.entries(claims.features))
            : new Map();
        this.userScopes = claims.scopes || [];
    }
    static fromHeaders(headers) {
        const authorizationHeader = headers['authorization'];
        if (!authorizationHeader) {
            throw new UnauthorizedError_1.UnauthorizedError('No authorization header present, context could not be determined');
        }
        try {
            return new Context((0, jwt_decode_1.default)(authorizationHeader));
        }
        catch (e) {
            throw new UnauthorizedError_1.UnauthorizedError('Failed to parse auth header, context could not be determined');
        }
    }
    static fromCookie(cookie) {
        try {
            return new Context((0, jwt_decode_1.default)(cookie));
        }
        catch (e) {
            throw new UnauthorizedError_1.UnauthorizedError('Failed to parse auth cookie, context could not be determined');
        }
    }
    hasRole(role) {
        return this.userRoles.indexOf(role) >= 0;
    }
    hasScope(role) {
        return this.userScopes.indexOf(role) >= 0;
    }
    hasAdminScope() {
        return this.hasScope('admin');
    }
    isAdmin() {
        return this.userRoles.indexOf('ADMIN') >= 0;
    }
    isAuthorizedUser() {
        return true;
    }
    getUserId() {
        return this.userId;
    }
    featureFlagEnabled(featureFlag) {
        return this.features.has(featureFlag)
            ? this.features.get(featureFlag) ?? false
            : false;
    }
}
exports.Context = Context;
//# sourceMappingURL=context.js.map