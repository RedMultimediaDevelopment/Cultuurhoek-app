/// <reference types="node" />
import { IncomingHttpHeaders } from 'http2';
export interface IContext {
    hasRole(role: string): boolean;
    isAdmin(): boolean;
    isAuthorizedUser(): boolean;
    hasScope(scope: string): boolean;
    hasAdminScope(): boolean;
    /**
     * Returns the userId when user is logged in, otherwise null for anonymous users
     */
    getUserId(): string | null;
    featureFlagEnabled(featureFlag: string): boolean;
}
export declare class AnonymousContext implements IContext {
    hasRole(role: string): boolean;
    isAdmin(): boolean;
    isAuthorizedUser(): boolean;
    getUserId(): string | null;
    featureFlagEnabled(_: string): boolean;
    hasScope(_: string): boolean;
    hasAdminScope(): boolean;
}
export declare class Context implements IContext {
    readonly userRoles: string[];
    readonly userScopes: string[];
    readonly userId: string;
    readonly features: Map<string, boolean>;
    private constructor();
    static fromHeaders(headers: IncomingHttpHeaders): Context;
    static fromCookie(cookie: string): Context;
    hasRole(role: string): boolean;
    hasScope(role: string): boolean;
    hasAdminScope(): boolean;
    isAdmin(): boolean;
    isAuthorizedUser(): boolean;
    getUserId(): string | null;
    featureFlagEnabled(featureFlag: string): boolean;
}
