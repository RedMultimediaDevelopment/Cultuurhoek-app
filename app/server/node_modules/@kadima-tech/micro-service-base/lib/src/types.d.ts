/// <reference types="node" />
import { IncomingMessage, ServerResponse } from 'http';
import { RawServerBase, FastifyReply } from 'fastify';
import { IContext } from './models/context';
export interface ArrayReply<T> {
    data: T[];
    total: number;
}
export interface ObjectReply<T> {
    data: T;
}
export type IFastifyReply<T> = FastifyReply<RawServerBase, IncomingMessage, ServerResponse, {
    Reply: T;
}>;
export type FastifyObjectReply<T> = IFastifyReply<ObjectReply<T>>;
export type FastifyArrayReply<T> = IFastifyReply<ArrayReply<T>>;
export interface IFastifyRequest {
    userContext: IContext;
    getContext: () => IContext;
}
export type IsExact<T, U> = [Required<T>] extends [Required<U>] ? [Required<U>] extends [Required<T>] ? true : false : false;
export type IsSubset<T, U> = [Required<T>] extends [Required<U>] ? true : false;
export declare function assert<T extends true | false>(expectTrue: T): void;
