"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fastify_1 = __importDefault(require("fastify"));
const stream_buffers_1 = require("stream-buffers");
const fastify_2 = require("./fastify");
const poll_logger_1 = __importDefault(require("./poll-logger"));
describe('fastify logger tests', () => {
    describe('errors and warnings', () => {
        it('logs an info if a request returns a 2xx', async () => {
            const stream = new stream_buffers_1.WritableStreamBuffer();
            const httpLogger = (0, fastify_2.createFastifyLogger)({ level: 'info' }, stream);
            const app = (0, fastify_1.default)({
                logger: httpLogger,
            });
            app.get('/', async (request, reply) => {
                reply.send('hello');
            });
            const response = await app.inject('/');
            expect(response.statusCode).toEqual(200);
            const output = await (0, poll_logger_1.default)(stream);
            expect(output[0]?.severity).toEqual('INFO');
        });
        it('logs http labels', async () => {
            const stream = new stream_buffers_1.WritableStreamBuffer();
            const httpLogger = (0, fastify_2.createFastifyLogger)({ level: 'info' }, stream);
            const app = (0, fastify_1.default)({
                logger: httpLogger,
            });
            app.get('/', async (request, reply) => {
                reply.send('hello');
            });
            const response = await app.inject('/');
            expect(response.statusCode).toEqual(200);
            const output = await (0, poll_logger_1.default)(stream);
            // fastify sends one log for the request and one log for the response
            expect(output[0]?.httpRequest).toEqual({
                requestMethod: 'GET',
                requestUrl: '/',
            });
            expect(output[1]?.httpRequest).toEqual({
                requestMethod: 'GET',
                requestUrl: '/',
                status: 200,
            });
        });
        it('logs request payloads', async () => {
            const stream = new stream_buffers_1.WritableStreamBuffer();
            const httpLogger = (0, fastify_2.createFastifyLogger)({ level: 'info' }, stream);
            const app = (0, fastify_1.default)({
                logger: httpLogger,
            });
            (0, fastify_2.registerFastifyLoggingHooks)(app);
            app.post('/', async (request, reply) => {
                reply.send({ nice: 'response' });
            });
            const response = await app.inject({
                method: 'POST',
                url: '/',
                payload: { hello: 'world' },
            });
            expect(response.statusCode).toEqual(200);
            const output = await (0, poll_logger_1.default)(stream);
            expect(output[1]?.requestBody).toEqual({
                hello: 'world',
            });
        });
        it('logs response payloads', async () => {
            const stream = new stream_buffers_1.WritableStreamBuffer();
            const httpLogger = (0, fastify_2.createFastifyLogger)({ level: 'info' }, stream);
            const app = (0, fastify_1.default)({
                logger: httpLogger,
            });
            (0, fastify_2.registerFastifyLoggingHooks)(app);
            app.post('/', async (request, reply) => {
                reply.send({ nice: 'response' });
            });
            const response = await app.inject({
                method: 'POST',
                url: '/',
                payload: { hello: 'world' },
            });
            expect(response.statusCode).toEqual(200);
            const output = await (0, poll_logger_1.default)(stream);
            expect(output[2]?.responseBody).toEqual({
                nice: 'response',
            });
        });
    });
});
//# sourceMappingURL=fastify.test.js.map