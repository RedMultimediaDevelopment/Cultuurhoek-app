"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = void 0;
const pino_1 = __importDefault(require("pino"));
const request_context_1 = require("./request-context");
const stack_driver_1 = require("./stack-driver");
const defaultRedactions = ['email', 'password'];
function createLogger(options, outputStream) {
    const mergedOptions = {
        redactions: defaultRedactions,
        ...options,
        mixin: (_context) => {
            // set the request id in the log message if its not already there
            return {
                reqId: _context?.res?.request?.id || (0, request_context_1.getRequestIdFromContext)(),
            };
        },
    };
    const logger = outputStream
        ? (0, pino_1.default)(getPinoLoggerOptions(mergedOptions), outputStream)
        : (0, pino_1.default)(getPinoLoggerOptions(mergedOptions));
    // warn if we have redaction turned off
    if (options.disableRedaction) {
        logger.warn('Redaction is turned off in the logger');
    }
    return logger;
}
exports.createLogger = createLogger;
function getPinoLoggerOptions(options) {
    // filter out the legacy pretty print options
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { prettyPrint, ...filteredOptions } = options;
    let pinoOptions = {
        ...filteredOptions,
        level: options.level,
    };
    if (options.prettyPrint) {
        pinoOptions = {
            ...pinoOptions,
            transport: {
                target: 'pino-pretty',
                options: {
                    translateTime: 'HH:mm:ss.l',
                    levelFirst: true,
                    ignore: 'pid,hostname',
                    crlf: true,
                    messageFormat: '{msg} {req.method} {req.url} {res.statusCode}',
                },
            },
        };
    }
    else {
        // if we are not pretty printing we need to run in stackdriver mode
        pinoOptions = {
            ...pinoOptions,
            ...stack_driver_1.stackdriverOptions,
        };
    }
    if (!options.disableRedaction) {
        pinoOptions = {
            ...pinoOptions,
            redact: {
                paths: options.redactions || [],
                censor: '**REDACTED**',
            },
        };
    }
    return pinoOptions;
}
//# sourceMappingURL=logger.js.map