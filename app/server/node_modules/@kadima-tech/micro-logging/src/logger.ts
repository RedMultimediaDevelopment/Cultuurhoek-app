import pino, { pino as PinoTypes } from 'pino';
import { getRequestIdFromContext } from './request-context';
import { stackdriverOptions } from './stack-driver';

export type Logger = PinoTypes.Logger;
export type DestinationStream = PinoTypes.DestinationStream;
export type LogLevel = PinoTypes.Level;

export interface LoggerOptions {
  level: LogLevel;
  disableRedaction?: boolean;
  redactions?: string[];
  prettyPrint?: boolean;
}

const defaultRedactions: string[] = ['email', 'password'];

export function createLogger(
  options: LoggerOptions,
  outputStream?: DestinationStream
): Logger {
  const mergedOptions = {
    redactions: defaultRedactions,
    ...options,
    mixin: (_context: any) => {
      // set the request id in the log message if its not already there
      return {
        reqId: _context?.res?.request?.id || getRequestIdFromContext(),
      };
    },
  };

  const logger = outputStream
    ? pino(getPinoLoggerOptions(mergedOptions), outputStream)
    : pino(getPinoLoggerOptions(mergedOptions));

  // warn if we have redaction turned off
  if (options.disableRedaction) {
    logger.warn('Redaction is turned off in the logger');
  }

  return logger;
}

function getPinoLoggerOptions(options: LoggerOptions): PinoTypes.LoggerOptions {
  // filter out the legacy pretty print options
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { prettyPrint, ...filteredOptions } = options;

  let pinoOptions: PinoTypes.LoggerOptions = {
    ...filteredOptions,
    level: options.level,
  };

  if (options.prettyPrint) {
    pinoOptions = {
      ...pinoOptions,
      transport: {
        target: 'pino-pretty',
        options: {
          translateTime: 'HH:mm:ss.l',
          levelFirst: true,
          ignore: 'pid,hostname',
          crlf: true,
          messageFormat: '{msg} {req.method} {req.url} {res.statusCode}',
        },
      },
    };
  } else {
    // if we are not pretty printing we need to run in stackdriver mode
    pinoOptions = {
      ...pinoOptions,
      ...stackdriverOptions,
    };
  }

  if (!options.disableRedaction) {
    pinoOptions = {
      ...pinoOptions,
      redact: {
        paths: options.redactions || [],
        censor: '**REDACTED**',
      },
    };
  }

  return pinoOptions;
}
