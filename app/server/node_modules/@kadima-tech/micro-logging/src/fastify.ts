import { FastifyInstance } from 'fastify';
import { fastifyRequestContextPlugin } from '@fastify/request-context';
import { createLogger, LoggerOptions, DestinationStream } from './logger';

const defaultFastifyRedactions: string[] = [
  'req.headers.authorization',
  'req.headers.cookie',
  'res.headers["set-cookie"]',
  'requestBody.email',
  'responseBody.email',
  'responseBody.data.email',
  'responseBody.data[*].email',
  'responseBody.data.serviceAccess',
];

export function createFastifyLogger(
  options: LoggerOptions,
  outputStream?: DestinationStream
) {
  return createLogger(
    { redactions: defaultFastifyRedactions, ...options },
    outputStream
  );
}

export function registerFastifyLoggingHooks(app: FastifyInstance) {
  app
    .register(fastifyRequestContextPlugin, {
      hook: 'onRequest',
    })
    .addHook('onRequest', (req, reply, next) => {
      req.requestContext.set('requestId', req.id);
      next();
    })
    .addHook('preHandler', function (req, reply, next) {
      // log the request payload
      if (req.body) {
        req.log.info({ requestBody: req.body }, 'request body');
      }
      next();
    })
    .addHook('preSerialization', (_request, reply, payload, next) => {
      // add a non-serialised version of the response payload to the reply chain
      if (payload) {
        Object.assign(reply as any, { preSerialisedPayload: payload });
      }
      next();
    })
    .addHook('onSend', function (req, reply, payload, next) {
      const responseContentType = reply.getHeader('content-type');
      if (responseContentType?.includes('application/json')) {
        // log out the response payload
        const responseBody = (reply as any).preSerialisedPayload || payload;
        if (responseBody) {
          req.log.info({ responseBody }, 'response body');
        }
      }

      // return the request id in the headers
      reply.header('x-request-id', req.id);
      next();
    });
}
