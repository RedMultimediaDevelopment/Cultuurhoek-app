import fastify from 'fastify';
import { WritableStreamBuffer } from 'stream-buffers';

import { createFastifyLogger, registerFastifyLoggingHooks } from './fastify';
import pollLogger from './poll-logger';

describe('fastify logger tests', () => {
  describe('errors and warnings', () => {
    it('logs an info if a request returns a 2xx', async () => {
      const stream = new WritableStreamBuffer();
      const httpLogger = createFastifyLogger({ level: 'info' }, stream);

      const app = fastify({
        logger: httpLogger,
      });

      app.get('/', async (request, reply) => {
        reply.send('hello');
      });

      const response = await app.inject('/');

      expect(response.statusCode).toEqual(200);

      const output = await pollLogger(stream);
      expect(output[0]?.severity).toEqual('INFO');
    });

    it('logs http labels', async () => {
      const stream = new WritableStreamBuffer();
      const httpLogger = createFastifyLogger({ level: 'info' }, stream);

      const app = fastify({
        logger: httpLogger,
      });

      app.get('/', async (request, reply) => {
        reply.send('hello');
      });

      const response = await app.inject('/');

      expect(response.statusCode).toEqual(200);

      const output = await pollLogger(stream);
      // fastify sends one log for the request and one log for the response
      expect(output[0]?.httpRequest).toEqual({
        requestMethod: 'GET',
        requestUrl: '/',
      });
      expect(output[1]?.httpRequest).toEqual({
        requestMethod: 'GET',
        requestUrl: '/',
        status: 200,
      });
    });

    it('logs request payloads', async () => {
      const stream = new WritableStreamBuffer();
      const httpLogger = createFastifyLogger({ level: 'info' }, stream);

      const app = fastify({
        logger: httpLogger,
      });

      registerFastifyLoggingHooks(app);

      app.post('/', async (request, reply) => {
        reply.send({ nice: 'response' });
      });

      const response = await app.inject({
        method: 'POST',
        url: '/',
        payload: { hello: 'world' },
      });

      expect(response.statusCode).toEqual(200);

      const output = await pollLogger(stream);

      expect(output[1]?.requestBody).toEqual({
        hello: 'world',
      });
    });

    it('logs response payloads', async () => {
      const stream = new WritableStreamBuffer();
      const httpLogger = createFastifyLogger({ level: 'info' }, stream);

      const app = fastify({
        logger: httpLogger,
      });

      registerFastifyLoggingHooks(app);

      app.post('/', async (request, reply) => {
        reply.send({ nice: 'response' });
      });

      const response = await app.inject({
        method: 'POST',
        url: '/',
        payload: { hello: 'world' },
      });

      expect(response.statusCode).toEqual(200);

      const output = await pollLogger(stream);

      expect(output[2]?.responseBody).toEqual({
        nice: 'response',
      });
    });
  });
});
