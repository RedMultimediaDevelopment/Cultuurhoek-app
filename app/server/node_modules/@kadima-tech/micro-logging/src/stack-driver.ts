import pino from 'pino';

// stack driver uses custom logging names
// https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry#logseverity
const pinoLevelToSeverityLookup: Record<string, string> = {
  trace: 'DEBUG',
  debug: 'DEBUG',
  info: 'INFO',
  warn: 'WARNING',
  error: 'ERROR',
  fatal: 'CRITICAL',
};

// add "httpRequest" property that stackdriver can use to label log lines with http information
// eslint-disable-next-line @typescript-eslint/ban-types
function addLabels(object: any): object {
  if (!object.req && !object.res) {
    return object;
  }

  let httpRequest: Record<string, any> = {
    status: object.res?.statusCode,
    requestMethod:
      object.res?.req?.method ||
      object.req?.method ||
      object.res?.request.method,
    requestUrl:
      object.res?.req?.url || object.req?.url || object.res?.request?.url,
  };

  // remove any blank properties
  httpRequest = Object.fromEntries(
    Object.entries(httpRequest).filter(([_, v]) => v != null)
  );

  return {
    ...object,
    httpRequest,
  };
}

// these options reformat the output into the json structure stackdriver expects
export const stackdriverOptions: pino.LoggerOptions = {
  timestamp: false, // let stackdriver work out the timestamp, if we get the format wrong the logger stops working in vm's
  messageKey: 'message',
  formatters: {
    level(label, number) {
      return {
        severity:
          pinoLevelToSeverityLookup[label] || pinoLevelToSeverityLookup['info'],
        level: number,
      };
    },
    log: addLabels,
  },
};
